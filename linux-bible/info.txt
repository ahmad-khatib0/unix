Nearly every major Linux distribution that offers desktop interfaces is based on the X
  Window System originally from the X.Org Foundation (http://www.x.org). The X Window
  System provides a framework on which different types of desktop environments or simple
  window managers can be built. A replacement for X.Org called Wayland (http://wayland
  .freedesktop.org) is being developed. Although Wayland is the default X server for
  Fedora now, you can still choose X.Org instead.

X itself provides a plain gray background and a simple “X” mouse cursor. There are no
  menus, panels, or icons on a plain X screen. If you were to launch an X client (such as a ter-
  minal window or word processor), it would appear on the X display with no border around it
  to move, minimize, or close the window. Those features are added by a window manager.

the bash shell, which stands for Bourne Again Shell. The name is derived from the fact that bash 
  is compatible with the one of the earliest UNIX shells: the Bourne shell 
  (named after its creator, Stephen Bourne, and represented by the sh command).
  Although bash is included with most distributions and considered a standard, other shells are avail-
  able, including the C shell (csh), which is popular among BSD UNIX users, and the Korn shell (ksh),
  which is popular among UNIX System V users. Ubuntu uses the dash shell by default at boot time,
  which is designed to perform faster than the bash shell. Linux also has a tcsh shell 
  (an improved C shell) and an ash shell (another Bourne shell look-alike).

The /sbin and /usr/sbin directories contain administrative commands 
  (some Linux systems don’t put those directories in regular users’ paths).
  To make commands available to all users, add them to /usr/local/bin.

The path directory order is important. Directories are checked from left to right. So, in this
  example, if there is a command called foo located in both the /usr/bin and /bin direc-
  tories, the one in /usr/bin is executed. To have the other foo command run, you either
  type the full path to the command or change your PATH variable. 

Here is the order in which the shell checks for the commands you type: 
1. Aliases.
2. Shell reserved word. These are words reserved by the shell for special use. Many of these 
   are words that you would use in programming-type functions, such as do, while, case, and else. 
3. Function. This is a set of commands that is executed together within the current shell.
4. Built-in command. This is a command built into the shell. As a result, there is no representation of 
   the command in the filesystem. Some of the most common commands that you will use are shell 
   built-in commands, such as cd, echo, exit, fg (to bring a command running in the background to the foreground), history (to see a
   list of commands that were previously run), pwd, set (to set shell options), and type 
   (to show the location of a command).
5. Filesystem command. This command is stored in and executed from the computer’s filesystem. 
   (These are the commands that are indicated by the value of the PATH variable.)

shell history is stored permanently when the shell exits properly, you can prevent storing a shell’s 
  history by killing a shell. For example: kill -9 1234 

Metacharacters include the pipe character (|), ampersand (&), semicolon (;), right parenthesis ()), 
  left parenthesis ((), less than sign (<), and greater than sign (>)

Storing YUM repository metadata to local RPM database. 
  The metadata contained in each RPM package that is installed is ultimately copied into the local RPM database. 
  The RPM database is contained in files that are stored in the /var/lib/rpm directory.

Using YUM with third-party software repositories
   I recommend that you either (1) don’t enable any extra software repositories, or (2) enable only the RPM Fusion 
   repository (http://rpmfusion.org) at first for Fedora and the EPEL repository (http://fedoraproject.org/wiki/EPEL) for Red
  Hat Enterprise Linux. RPM Fusion represents a fusion of several popular third-party Fedora repositories (Freshrpms, 
  Livna.org, and Dribble). See the repository’s FAQ for details (http://rpmfusion.org/FAQ).

Verifying RPM packages
  Using the -V option, you can check the packages installed on your system to see if the components have been changed 
  since the packages were first installed. Although it is nor- mal for configuration files to change over time, it is 
  not normal for binaries (the commands in /bin, /sbin, and so on) to change after installation. Binaries that are 
  changed are probably an indication that your system has been cracked.   example:

# rpm -i zsh-5.7.1-1.fc30.x86_64.rpm
# echo hello > /bin/zsh                # miss with it
# rm /etc/zshrc                        # miss with it
# rpm -V zsh                           # Verifying
missing c /etc/zshrc 
S.5....T. /bin/zsh                     # /bin/zsh file has been tampered with
 +-----------------------------------------------------------------------------------------------------+
 |                                                                                                     |
 | Each time that you see a letter or a number instead of a dot from the rpm -V output, it is an       |
 | indication of what has changed. Letters that can replace the dots (in order) include the following: |
 | S       file Size differs                                                                           |
 | M       Mode differs (includes permissions and file type)                                           |
 | 5       MD5 sum differs                                                                             |
 | D       Device major/minor number mismatch                                                          |
 | L       readLink(2) path mismatch                                                                   |
 | U       User ownership differs                                                                      |
 | G       Group ownership differs                                                                     |
 | T       mTime differs                                                                               |
 | P       caPabilities differ                                                                         |
 |                                                                                                     |
 |                                                                                                     |
 +-----------------------------------------------------------------------------------------------------+

# To restore the package to its original state (missied with. cracked etc.)
# rpm -i --replacepkgs zsh-5.7.1-1.fc30.x86_64.rpm
# rpm -V zsh                            # no output

It is good practice to back up your RPM database (from /var/lib/rpm) and copy it to some read-only medium 
  (such as a CD). Then, when you go to verify packages that you suspect were cracked, you know that you 
  aren’t checking it against a database that has also been cracked.


Managing Software in the Enterprise
  In terms of enterprise computing, one of the great benefits of the design of RPM packages is that their management can 
  be automated. Other Linux packaging schemes allow packages to stop and prompt you for information when they are being 
  installed (such as asking for a 10 directory location or a username). RPM packages install without interruption, 
  offering some of the following advantages:
  
-- Kickstart files All of the questions that you answer during a manual install, and all of the packages that you select, 
   can be added into a file called a kickstart file. When you start a Fedora or Red Hat Enterprise Linux installer, 
   you can provide a kickstart file at the boot prompt. From that point on, the entire installation process completes 
   on its own. Any modifications to the default package installs can be made by running pre and post scripts from the 
   kickstart file to do such things as add user accounts or modify configuration files.
   
-- PXE boot You can configure a PXE server to allow client computers to boot an anaconda (installer) kernel and a 
   select kickstart file. A completely blank computer with a network interface card (NIC) that supports PXE booting 
   can simply boot from its NIC to launch a fresh installation. In other words, turn on the computer, and if it hits 
   the NIC in its boot order, a few minutes later you can have a freshly installed system, configured to your exact 
   specifications without intervention.
   
-- Satellite server (Spacewalk) Red Hat Enterprise Linux systems can be deployed using what is referred to as Satellite 
   Server. Built into Satellite Server are the same features that you have from Red Hat CDN to manage and deploy new 
   systems and updates. RHEL systems can be configured to get automatic software updates at times set from the satellite 
   server. Sets of packages called Errata that fix specific problems can be quickly and automatically deployed to the 
   systems that need them. Container Images Instead of installing individual RPMs on a system, you can package up a 
   few or a few hundred RPMs into a container image. The container image is like an RPM in that it holds a set of 
   software, but unlike an RPM in that it is more easily added to a system, run directly, and deleted from a 
   system than an RPM is.



