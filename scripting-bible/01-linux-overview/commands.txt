
# view the current default target 
$ systemctl get-default # graphical.target

# -s option to create the symbolic link
$ ln -s test_file slink_test_file

# To view a file or directory's inode number, add the -i parameter
ls -i *test_file

# Notice in the preceding example that, instead of having to use the ls -l command multiple times to find 
  a series of linked files' final object, you can use the readlink -f command. It immediately
  produces the linked file series' final object.
$ readlink -f ~/.tmux.conf 

# create A hard link
$ ln test_one hlink_test_one

# the file util It can peek inside a file and determine just what kind of file it is:
$ file .bashrc # or file /usr/bin/rm  # or ...

# number line 
$ cat -n test_file  # or -b number the lines that have text in them

# The more command is a pager utility
$ more long_content_file.json

# last 10 lines
tail log_file  # or custom it:  tail -n 2 log_file,  # use -f to watch

# it displays the first 10
head log_file  # or head -3 log_file  (omit -n in head or tail)

# list ext4 devices only 
$ mount -t ext4

# manually mounting a media device:
$ mount -t type device directory  # (type defines the filesystem type the disk was formatted under.)
# mount the USB memory stick at device /dev/sdb1 at location /media/disk
$ mount -t vfat /dev/sdb1 /media/disk

$ umount /home/rich/mnt

# df allows you to easily see what's happening (size, mount point ...) on all the mounted disks:
$ df -t ext4 -t vfat

# sort the file numerically 
sort -n file2

# sort based on 3char month 
sort -M file3

# The -k and -t parameters are handy when sorting data that uses fields (root:x:0:0:root:/root:/bin/bash)
# sort after : , -k on which to sort on (so sorted based on the third field, which is the numerical user ID value)
sort -t ':' -k 3 -n /etc/passwd

# find 
grep -v t file1 # output lines that don't match the pattern
grep -n t file1 #  find the line numbers where the matching patterns are found,
grep -e t -e f file1 # more than one matching pattern


tar -cvf test.tar test/ test2/ # create an archive file
tar -tf test.tar               # lists (but doesn't extract) the contents of the tar file test.tar
tar -xvf test.tar              # extracts the contents of the tar file test.tar

which sh
ls -l /usr/bin/sh
cat /etc/shells
echo $0                # display name of current shell

ps -f

# using background process lists
$ (tar -cf Doc.tar Documents ; tar -cf Music.tar Music)&

Co-processing performs almost identically to putting a command in background mode,
$ coproc sleep 10
$ coproc My_Job { sleep 10; } # extended syntax (naming this command)

# combine co-processing with process lists creating nested subshells
$ coproc ( sleep 10; sleep 2 )    # then to check:  ps --forest

$ type cd  # or $ type exit  
$ type -a echo  # see multiple flavors for commands (internal or external)
->> echo is a shell builtin
->> echo is /usr/bin/echo

# recall and reuse your last command
$ !!   # or !42  which is the command number

# force the command history to be written to the .bash_history file without leaving a shell session
$ history -a

# view global environment variables,
$ printenv  # or env
$ printenv HOME

# The set command displays all variables defined for a specific process, including
# both local and global environment variables as well as user-defined variables:
$ set

# Removing Environment Variables
$ unset my_variable

# append new search directories to the existing PATH environment variable
$ PATH=$PATH:/home/christine/Scripts



──────────────────────────────────────────────────────────────────────
 Linux File Permissions
──────────────────────────────────────────────────────────────────────
# The -D parameter shows what defaults the useradd command uses if you
# don't specify them in the command line when creating a new user account.
useradd -D 

# create with $HOME dir
useradd -m test

Changing the default values is a snap:
useradd -D -s /bin/tsch  # so now each created user will have the tsch shell as the default

remove an existing user account (-r with $HOME dir):
userdel -r test

# change test user password
passwd test

# using redirection to change multiple user passwords using the chpasswd command
chpasswd < users.txt

# change the default login shell for a user 
chsh -s /bin/csh test


# find information about people on your Linux system:
finger username

# change comments in the passwd file
chfn test

# Creating new groups
/usr/sbin/groupadd shared
/usr/sbin/usermod -G shared rich # add rich to the shared group

# using groupmod to change/add group info
groupmod -n sharing shared

# change the default touch permissions
$ umask 026  # so: touch newfile2:  -rw-r-----

# set the security settings using either octal mode: 
chmod 760 newfile

# or symbolic mode
$ chmod o+r newfile # adds the read permission 
$ chmod u-x newfile # removes the execute permission

# Changing ownership
chown dan newfile
chown dan.shared newfile  # user and group
chown .rich newfile       # just change the default group for a file
chown test. newfile       # change both (user and group) with just one entry

# chgrp changes the group only
chgrp shared newfile

# view the ACLs assigned to a file or directory:
$ getfacl test

# adds read and write permissions for the sales group to the test file
$ setfacl -m g:sales:rw test

# remove the permissions, use the -x option:
$ setfacl -x g:sales test

# To create a default ACL on a directory start the rule with d:
$ sudo setfacl -m d:g:sales:rw /sales






──────────────────────────────────────────────────────────────────────
 Linux File System
──────────────────────────────────────────────────────────────────────
# list available partitions
$ sudo fdisk -l 

# create a new partition 
$ sudo fdisk /dev/sdb    # or nv + n  (see file-system.txt/partitioning format )

# create a new partition (for drives that use the GUID Partition Table (GPT) indexing method)
$ sudo gdisk /dev/sda

# create a file system   (see also mkfs.x  where x is i.e ext3 or .... )
$ sudo mkfs.ext4 /dev/sdb1

# After you create the filesystem for a partition, the next step is to mount it on a virtual 
  directory mount point so that you can store data there. You can mount the new filesystem anywhere 
  in your virtual directory where you need the extra space.
$ mkdir /home/user/part
$ sudo mount -t ext4 /dev/sdb1 /home/user/part
$ lsblk -f /dev/sdb        # check

──────────────────────────────────────────────────────────────────────
NOTE NOTE NOTE: 
  This method of mounting a filesystem only temporarily mounts the filesystem. When you reboot 
  your Linux system, the filesystem doesn't automatically mount. To force Linux to automatically
  mount the new filesystem at boot time, add the new filesystem to the /etc/fstab file. 
──────────────────────────────────────────────────────────────────────

Creating logical volumes using logical volumes manager LVM

# first Create the PVs (phisical volume)
$ sudo pvcreate /dev/sdc1 /dev/sdd1 /dev/sde1

# display existing volume groups
$ sudo vgdisplay

# second create the volume group 
$ sudo vgcreate vg00 /dev/sdc1 /dev/sdd1

# third Create an LV:  The resulting storage volume's size is set using the -L option, 
  which uses space from the designated VG storage pool:
$ sudo lvcreate -L 1g -v vg00
  [sudo] password for username:
  Archiving volume group "vg00" metadata (seqno 1).
  Creating logical volume lvol0 ...
  Logical volume "lvol0" created.
# Notice that the first LV from this VG's default name is lvol0. 
  Its full device pathname is /dev/vg00/lvol0.

# check the create logical volume   # or use:  lvs | lvscan  commands  
$ sudo lvdisplay /dev/vg00/lvol0

# forth format it
$ sudo mkfs.ext4 /dev/vg00/lvol0

# mount it 
$ mkdir my_LV
$ sudo mount -t ext4 /dev/vg00/lvol0 my_LV

# finally again: Keep in mind that you'll want to add a record to the /etc/fstab file so that 
  your new LV is mounted automatically when the system boots






╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ Packages managment                                                                                          │
╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

$ apt --installed list
$ apt show package_name

# One detail you cannot get with apt is a listing of all the files associated with a particular 
  software package. To get this list, you will need to go to the dpkg command itself:
$ dpkg -L package_name

# You can also do the reverse — find what package a particular file belongs to:
$ dpkg --search absolute_file_name   # dpkg --search /bin/getfacl

# search 
$ apt search package_name
$ apt --names-only search zsh    # exactly

# The upgrade command won't remove any packages as part of the upgrade process, so use: 
$ apt full-upgrade

# remove software with its data
$ sudo apt purge zsh
$ sudo apt autoremove               # removes dependencies that are no longer required

$ dnf list installed  # or:
$ dnf list xterm      # or:
$ dnf list installed xterm

# find out what software package provides a particular file on your filesystem
$ dnf provides file_name   # i.e:   dnf provides /usr/bin/gzip

$ dnf list upgrades

# determining the dependencies for the xterm package:
$  dnf repoquery --deplist xterm

# To see what repositories you are currently pulling software from
$ dnf repolist


