Two types of file links are available in Linux: A symbolic link And  A hard link

A symbolic link, also called a soft link, is simply a physical file that points
  to another file somewhere in the virtual directory structure. The two
  symbolically linked together files do not share the same contents.

Another way to tell that these linked files are separate physical files is by viewing their inode 
  numbers. The inode number of a file or directory is a unique identification number that the kernel 
  assigns to each object in the filesystem. To view a file or directory's inode number, 
  add the -i parameter to the ls command:
$ ls -i *test_file

A hard link creates a separate virtual file that contains information about the original file and 
  where to locate it. However, the two files are actually the same physical file. To create a hard 
  link, again the original file must preexist, except that this time no parameter is needed on the 
  ln command:        $ ln test_one hlink_test_one

NOTE: You can only create a hard link between files on the same physical medium. To create 
  a link between files under separate physical mediums, you must use a symbolic link.

NOTE: moving the file changes the name from fall to fzll but it keeps the same inode 
  number and timestamp value. This is because mv affects only a file's name.

NOTE: the less command name comes from the phrase ‚Äúless is more‚Äù) üòÑ üòÑ.


The GNU ps command that's used in Linux systems supports three different
  types of command-line parameters:
. . Unix-style parameters, which are preceded by a dash
. . BSD-style parameters, which are not preceded by a dash
. . GNU long parameters, which are preceded by a double dash

The ps command columns: 
  UID: The user responsible for launching the process
  PID: The process ID of the process
  PPID: The PID of the parent process (if a process is started by another process)
  C: Processor utilization over the lifetime of the process
  STIME: The system time when the process started
  TTY: The terminal device from which the process was launched
  TIME: The cumulative CPU time required to run the process
  CMD: The name of the program that was started

When using: ps -l # extra columns will appear 
F: System flags assigned to the process by the kernel
S: The state of the process (O = running on processor; S = sleeping; R = runnable, 
   waiting to run; Z = zombie, process terminated but parent not available; T = process stopped)
PRI:   The priority of the process (higher numbers mean lower priority)
NI:    The nice value, used for determining priorities ADDR: The memory address of the process
SZ:    Approximate amount of swap space required if the process was swapped out
WCHAN: Address of the kernel function where the process is sleeping


The Linux filesystem combines all media disks into a single virtual directory. 
  Before you can use a new media disk on your system, you need to place it in the 
  virtual directory. This task is called mounting.

The mount command provides four pieces of information:
1 The device filename of the media
2 The mount point in the virtual directory where the media is mounted
3 The filesystem type
4 The access status of the mounted media

Linux recognizes numerous filesystem types. If you share removable media devices with 
  your Windows PCs, the types you're most likely to run into are:
vfat:    Windows FAT32 filesystem with support for long filenames
ntfs:    Windows advanced filesystem used in Windows NT and later operating systems
exfat:   Windows filesystem optimized for removable media
iso9660: The standard CD-ROM and DVD filesystem

Most USB memory sticks are formatted using the vfat filesystem. If you need to mount 
  a data CD or DVD, you'll have to use the iso9660 filesystem type.

The -o option ( mount command ) allows you to mount the filesystem with a comma-separated
  list of additional options. The popular options to use are as follows:
ro         : Mount as read-only.
rw         : Mount as read-write.
user       : Allow an ordinary user to mount the filesystem.
check=none : Mount the filesystem without performing an integrity check.
loop       : Mount a file.


The df command displays the following:
  The device location of the device
  How many 1024-byte blocks of data it can hold
  How many 1024-byte blocks are used
  How many 1024-byte blocks are available
  The amount of used space as a percentage
  The mount point where the device is mounted



