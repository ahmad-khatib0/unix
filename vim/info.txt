? fro checking a option,
set shiftwidth=4 // to set an option 
set is? 
set hls?        //highlight search 
set number      //number lines 
set shiftwidth  //indent size
set tabstop     //tab indent size
set expandtab   //ie if shiftwidth is 8 and tabstop is 8 and expandtab is off , so if you 
//preformed a right shift operation a tab will be inserted 
//it's better to turn this option on to see the representing spaces in list mode not the tap (^I character)
set list        //if this mode is on, you will see the representing tap shown not the spaces 


the letter x for cutting 
the letter y for copying (yanking)
the letter p for pasting (yanking)
the letter d for deleting 
the letter c for changing 
the letter a for inserting mode 

the letter o for inseting lines
the letter u for undo changes 
the letter ^r redo 
the letter shift+r to replace mode 
the letter r to replace one char 
the letter g for text transformation 
 
the letter j for joining lines 
the letter f for searching 

f + char 
f + char + ; to repeat the same search 
f + char + , to repeat the same search  in reverse 
t + char places the cursor before this matched char in one char 
T + char places the cursor after this matched char in one char 
count + f + char // ie 2fr finds the second match 
dtw delete until the matched w letter 
all of these for the same line 

/and  // search for and word on multiple lines 
n go to the next match 
/and and then change the matches  if you want and then n to go the next match and then , to repeat the replacing 
?to    //to search backward 
pca a word, and put # that moves you to the last match 
pca a word and then put * to find the next match (entire word only)
d /This  //delete until This
"an then /point  //copy from n letter until matches point word 
:s/net/org/g     //replace net with org , g is flag which will match every occurrence on a line 
:1,6s/for/FOR/g   // chang for with FOR from line number 1 to line 5 
.,$       //current line => last line 
%         //all lines in file  or : 1,$ same thing  
:pattern-1/,/pattern-2/s/old/new/g       //ie :Global_Config/,/Local_Config/s/.net/.com/g 
replace .net with .com in this range       //ie 2:  :Local/,$s/net/org/g
//ie 3:  :s#/var/spool#/usr/local#    replace /var/spool with /usr/local 


//all da or ca ... commands can be replaced with di, ca... , so for example da. a stands for   
//all or around, and i stands for inner
das                 //delete a sentence 
daw                 //delete a word
dap                 //delete a paragraph
di[  or di]         //delete what inside an array 
da[  or da]         //delete the array, (with the brackets)
di(  or di)         //delete what inside parentheses
ya<  or ya>         //yank what inside the tag,
dat                 //delete a tag (with its nested tags)
dit                 //delete inner tag, 
di{  or di}         //delete what inside an object 
ca"  or ci' or `    //change what outside or inside '' or "" or `` 

q+reg-char        //start recoding a macro(keystrokes)
q                 //to stop recording macro
@+reg-char        //apply the recorded macro
@@                //repeat the last macro
:27,36normal @d   //apply d macro from 27 to 36 lines 
//to edit registered macro, just paste it from the reg and edit it, and yank it back
//store global macro in .vimrc:  let @d = '0:s/"/'/g^M":;:/<80>kbs/,//^'

df@      //delete until and including @ 
>> or << //shift a line 
>i{      //shift what inside a block 

///// note: for example gv works for linewise and blockwise mode, and other also
-v to start visual mode
V to start linewise visual mode 
ctrl-v start blockwise visual mode // TIP: its greet replacement for shift+ctrl+alt in vscode 
    o                 //moves cursor to the opposite of the highlight 
    iw                //select the word, also there are: ip, as......
    i} or a[ or ....  //to select what outside or inside a block 
    ap                //select a paragraph
    gv                //back to most recent highlighting 
    U                 // make highlighted uppercase, u for lowercase 
    O                 // moves cursor to the opposite highlighted on same line 
    $                 //select until the end of the highlighted text 
    ><                // to shift highlighted text 
    // lowercase i or a dose'nt work in visual mode, only A or I

    //start V, highlight what you want, thane press :  and you will be in the command mode, 
    //so '>,<'  '> is the start and '< is then end of the range, ie you can to append : 
    // s/usa/USA/ to replace usa with USA in those lines 
    // select something with the ^v, go to command mode: , append center, the text will be centered 
    // or center 40 so the text will be centered based on 40 columns 
    //ce is shortcut for center.. left will place the text in the left. le6 will move the text 6 characters 
    //from the beginning, ri or right will move it to right, ri60 will justify it 60 characters from the right.
    //position a text in center, and then if you want replace the white characters with the desired beginning text  
    //so now your centered positioned text will remain in the center 

//to know which character is represented by vim, press ctrl+v than your needed character
// esc key represented by ^[ 
// enter key represented by ^M
// tap key represented by ^I


:e  test.txt     //to create a file using vim 
:color           //list vim color schema
:map             //see current defined maps 
:mkvimrc         //make vimrc file 
:h option-list   //available options 
:options         //read brief info about options 
:h 'option'      //read about an option 
"+yy             //yank to the system clipboard


//vim settings and configuration 
:set             //to see which options are set to be deffer than their default values  
:set history&    //restore something to its default settings 
set history=1000 //1000 itmes in the history
set ruler        //show the cursor position 
set showcmd      //" show incomplete commands
set scrolloff=5  //" keep 5 lines above when reposition the screen (z + enter) 
set hlsearch
set incsearch    //" highlight matching text as we type 
set ignorecase
set smartcase    //" ignore the ignorecase option when type uppercase letters 
set number
set backup       //" keeps a backup of the file you're editing before saving it, (ends with ~)
set bex=_edited  //(backup extension), the suffix of the backup files 
set lbr          //don't break the word on wapping 
set ai           //auto indent, preserve the indenting when you insert a new line 
set si           //smart indent, ie will indent the } correctly when you insert it 
set bg=dark      // or light ...
color slate      //set color schema
:source .vimrc   //to reload it 
:set clipboard=unnamedplus    //allow you to past,copy..... from and to system clipboard directly 



// the map command is like:    map KEY KEYSTROKES  ie:
map <F2> iAhmad Khatib<CR>123 Eseneler Main Street<CR> AnyTown, IST<CR><ESC>
//so anytime you press f2 this instructions will be executed, (similar to macros)
//you can to bind a functionality to a combination of your desired keys, ie 
//the following command will make saving file quicker by pressing \w 
map <leader>w :w!<CR>
//important note: if you didn't use the leader here (\) the w command will be overwritten
let mapleader=","         // change the default leader character (which is \)
//another note: if you changed the leader character, put it above any specified map in order to work first
vmap something   //means this key mapping is available in visual mode only, nmap  :normal mode ,,,,
by default key mapping are recursive, so if you used a mapped key in another key mapping it get expanded
there as well, in speaking of which, ie vnoremap disables this behavior

" vim: set ft=vim :         //this called modeline, ie it force vim to 
//treat this file a vim file, ie if you have file written in C and doesn't end with 
//an extension   " vim: set ft=c :   will force vim to treat it like so 

///////mapping keys representor
<BS>           Backspace                  <Right>        Right arrow
<CR>           Enter                      <Insert>       Insert              
<Enter>        Enter                      <Del>          Delete
<Return>       Enter                      <Home>         Home
<Esc>          Escape                     <End>          End
<Space>        Space                      <PageUp>       Page-Up
<Up>Up         arrow                      <PageDown>     Page-Down
<Down>         Down arrow                 <Tab>          Tab
<Left>         Left arrow                 <bar>          '|'
<C-X>          Ctrl-X                     <F1>-<F12>     Function keys



///// buffers (files in vim term) 
set hidden                           //allows you to switch buffers without saving changes 
:ls or :buffers                      //to see opened files 
:buffer+number or + filename         //to open this file 
:b + ^D                              //will give you a list to chose from 
:bn or :bnext                        //to go to next file in buffer list 
:bp or :bprevious                    //to go to previous buffer in buffer list
:bf                                  //to go to first buffer 
:bl                                  //to go to last buffer 
ctrl+^                               //to go to recently opened buffer
:b#                                  //to go to recently opened buffer
:qall!                               //abort all changes to buffers 
:wall                                //save all changes 
:badd                                //add a file to buffer list without opining it 
:bd num|name|rang                    //delete a buffer from list 
:&bd                                 //delete a buffers 
:bufdo set nu                        //enable line numbers for all buffers 
:bufdo %s/#/@/g | w                  //replace in multiple buffers 
:E                                   //folder explorer
:bd                                  //to close explorer

//////////// windows /////////////////////////////
:sp  or ^w s                         //split a window
:sp  buffer                          //add to split window
:vs  or ^w v                         //split horizontally
:vs  buffer                          //add to split window horizontally 
:q   or  ^w q                        //close a window
:on  or :only  or  ^w o              //close all except current window
^w + + | - | > | < | =               //change window size
:ball                                //open all buffers 
:windo %s/#/@/g                      //replace in multiple windows 


//////////////////plugins ///////////////////////
O                                    //open folder recursively 
X                                    //unfold folder 
^p                                   //show files using ctrl-p plugin
^x  or ^v                            //open file horizontally or vertically 
:packadd plugin-name                 //enable a plugin 
:pa tabular  then  Tap /|/r4         //will align all | with 4 spaces              
\\w  or \\k  or \\s                  //search and navigate using easymotion
