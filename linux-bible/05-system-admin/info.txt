
su command: Often, su is used to open a shell as root user. After the shell is open, the administrator can 
  run multiple commands and then exit to return to a shell as a regular user.

sudo command: With sudo, a regular user is given root privileges, but only when that user runs the sudo command to run 
  another command. After running that one command with sudo, the user is immediately returned to a shell and acts as the
  regular user again.

Cockpit browser-based administration: RHEL, Fedora, and other Linux distributions have committed to Cockpit as their 
  primary browser-based system administration facility. With Cockpit enabled, you can monitor and change your system’s 
  general activities, storage, networking, accounts, services, and other features

Graphical windows: Before Cockpit was widely available, RHEL, Fedora, and other Linux distributions offered individual 
  graphical administration tools that were launched by commands beginning with system-config-*. Although most of these
  administration tools are not being offered in the latest release of RHEL and Fedora,

The following ( system-config-* ) graphical tools were available in Fedora:
- - Domain Name System (system-config-bind): Create and configure zones if your computer is acting as a DNS server.

- - HTTP (system-config-httpd): Configure your computer as an Apache web server.

- - NFS (system-config-nfs): Set up directories from your system to be shared with other computers on your network 
    using the NFS service.
    
- - Root Password (system-config-rootpassword): Change the root password.

- - Samba NFS (system-config-samba): Configure Windows (SMB) file sharing. (To configure other Samba features, 
    you can use the SWAT window.)
  

$ su
  When you are prompted, type the root user’s password. The prompt for the regular user ($) changes to the superuser 
  prompt (#). At this point, you have full permission to run any command and use any file on the system. However, one 
  thing that the su command doesn’t do when used this way is read in the root user’s environment. As a result, you 
  may type a command that you know is available and get the message Command Not Found. To fix
  this problem, use the su command with the dash (-) option instead like this:    $ su -

Gaining administrative access with sudo
  Particular users can also be given administrative permissions for particular tasks or any task by typing sudo followed 
  by the command they want to run, without being given the root password. The sudoers facility is the most common way to 
  provide such privilege. Using sudoers for any users or groups on the system, you can do the following: 
■■ Assign root privilege for any command they run with sudo.
■■ Assign root privilege for a select set of commands.
■■ Give users root privilege without telling them the root password because they only
   have to provide their own user password to gain root privilege.
■■ Allow users, if you choose, to run sudo without entering a password at all.
■■ Track which users have run administrative commands on your system. (Using su, all you know is that someone with 
   the root password logged in, whereas the sudo command logs which user runs an administrative command.)


Parameter expansion in bash
  As mentioned earlier, if you want the value of a variable, you precede it with a $ (for example, $CITY). This is 
  really just shorthand for the notation ${CITY}; curly braces are used when the value of the parameter needs to be 
  placed next to other text without a space. Bash has special rules that allow you to expand the value of a variable 
  in different ways. Going into all of the rules is probably overkill for a quick introduction to shell scripts, but the 
  following list presents some common constructs you’re likely to see in bash scripts that you find on your Linux system.
      ${var:-value}: If variable is unset or empty, expand this to value.
      ${var#pattern}: Chop the shortest match for pattern from the front of var’s value.
      ${var##pattern}: Chop the longest match for pattern from the front of var’s value.
      ${var%pattern}: Chop the shortest match for pattern from the end of var’s value.
      ${var%%pattern}: Chop the longest match for pattern from the end of var’s value.


You can enter as many sudo commands as you wants for the next five minutes, on RHEL and Fedora systems, without having 
  to enter it again. For Ubuntu, this is set to zero, for no time-out. (You can change the time-out value from five 
  minutes to any length of time you want by setting the passwd_timeout value in the /etc/sudoers file.)

Administrative commands: 
  When you log in as root (or use su - from the shell to become root), your $PATH variable is set to include some 
  directories that contain commands for the root user. In the past, these have included the following:
-  /sbin: Originally contained commands needed to boot your system, including commands for checking filesystems 
    (fsck) and turning on swap devices (swapon).
- /usr/sbin: Originally contained commands for such things as managing user accounts (such as useradd) and checking 
   processes that are holding files open (such as lsof). Commands that run as daemon processes are also contained in this
   directory. Daemon processes are processes that run in the background, waiting for service requests such as those to 
   access a printer or a web page. (Look for commands that end in d, such as sshd, pppd, and cupsd.)

For the latest Ubuntu, RHEL and Fedora releases, all administrative commands from the two directories are stored in 
  the /usr/sbin directory (which is symbolically linked from / sbin). Also, only /usr/sbin is added to the PATH of 
  the root user, as well as the PATH of all regular users.
  
Some administrative commands are contained in regular user directories (such as /bin and /usr/bin). This is especially 
  true of commands that have some options available to everyone. An example is the /bin/mount command, which anyone can 
  use to list mounted filesystems but only root can use to mount filesystems. (Some desktops, however, are configured 
  to let regular users use mount to mount CDs, DVDs, or other removable media.)

If you want to add commands to your system, consider adding them to directories such as /usr/local/bin or 
  /usr/local/sbin. Some Linux distributions automatically add those directories to your PATH, usually before your 
  standard bin and sbin directories. In that way, commands installed to those directories are not only accessible, but 
  can also override commands of the same name in other directories. Some third-party applications that are not included 
  with Linux distributions are sometimes placed in the /usr/local/bin, /opt/bin, or /usr/local/sbin directory.

The two major locations of configuration files are your home directory (where your personal configuration files are kept)
  and the /etc directory (which holds system-wide configuration files).

- /etc: This directory contains most of the basic Linux system configuration files.

- /etc/cron*: Directories in this set contain files that define how the crond utility runs applications on a daily 
   (cron.daily), hourly (cron.hourly), monthly (cron. monthly), or weekly (cron.weekly) schedule.
   
- /etc/cups: Contains files used to configure the CUPS printing service. 

- /etc/default: Contains files that set default values for various utilities. For example, the file for the useradd 
   command defines the default group number, home directory, password expiration date, shell, and skeleton 
   directory (/etc/skel) used when creating a new user account.

- /etc/httpd: Contains a variety of files used to configure the behavior of your Apache web server (specifically, 
   the httpd daemon process). (On Ubuntu and other Linux systems, /etc/apache or /etc/apache2 is used instead.)

- /etc/mail: Contains files used to configure your sendmail mail transport agent.

- /etc/postfix: Contains configuration files for the postfix mail transport agent.

- /etc/ppp: Contains several configuration files used to set up Point-to-Point Protocol (PPP) so that you can have 
   your computer dial out to the Internet. (PPP was more commonly used when dial-up modems were popular.)

- /etc/rc?.d: There is a separate rc?.d directory for each valid system state: rc0.d (shutdown state), rc1.d 
   (single-user state), rc2.d (multiuser state), rc3.d (multiuser plus networking state), rc4.d (user-defined state), 
   rc5.d (multiuser, networking, plus GUI login state), and rc6.d (reboot state). These directories are maintained 
   for compatibility with old UNIX SystemV init services.

- /etc/security: Contains files that set a variety of default security conditions for your computer, basically 
   defining how authentication is done. These files are part of the pam (pluggable authentication modules) package.

- /etc/skel: Any files contained in this directory are automatically copied to a user’s home directory when that 
   user is added to the system. By default, most of these files are dot (.) files, such as .kde (a directory for 
   setting KDE desktop defaults) and .bashrc (for setting default values used with the bash shell).

- /etc/sysconfig: Contains important system configuration files that are created and maintained by various services 
   (including firewalld, samba, and most networking services). These files are critical for Linux distributions, such 
   as Fedora and RHEL, that use GUI administration tools but are not used on other Linux systems at all. 

- /etc/systemd: Contains files associated with the systemd facility, for managing the boot process and system services. 
   In particular, when you run systemctl commands to enable and disable services, files that make that happen are stored 
   in subdirectories of the /etc/systemd system directory. 

- /etc/xinetd.d: Contains a set of files, each of which defines an on-demand network service that the xinetd daemon 
   listens for on a particular port. When the xinetd daemon process receives a request for a service, it uses the 
   information in these files to determine which daemon processes to start to handle the request.

The following are some interesting configuration files in /etc:
- aliases: Can contain distribution lists used by the Linux mail services. (This file is
   located in /etc/mail in Ubuntu when you install the sendmail package.)
- bashrc: Sets system-wide defaults for bash shell users. (This may be called bash. bashrc on some Linux distributions.)
- crontab: Sets times for running automated tasks and variables associated with the
   cron facility (such as the SHELL and PATH associated with cron).
- csh.cshrc (or cshrc): Sets system-wide defaults for csh (C shell) users.
- exports: Contains a list of local directories that are available to be shared by remote computers using the 
   Network File System (NFS).
- fstab: Identifies the devices for common storage media (hard disk, DVD, CD-ROM, and so on) and locations where they 
   are mounted in the Linux system. This is used by the mount command to choose which filesystems to mount when 
   the system first boots.
- group: Identifies group names and group IDs (GIDs) that are defined on the system. Group permissions in Linux 
   are defined by the second of three sets of rwx (read, write, execute) bits associated with each file and directory.
- gshadow: Contains shadow passwords for groups.
- host.conf: Used by older applications to set the locations in which domain names (for example, redhat.com) are 
   searched for on TCP/IP networks (such as the Inter- net). By default, the local hosts file is searched and then 
   any name server entries in resolv.conf.
- hostname: Contains the hostname for the local system (beginning in RHEL 7 and recent Fedora and Ubuntu systems).
- hosts: Contains IP addresses and hostnames that you can reach from your computer. 
   (Usually this file is used just to store names of computers on your LAN or small private network.)
- inittab: On earlier Linux systems, contained information that defined which programs start and stop when Linux boots, 
   shuts down, or goes into different states in between. This configuration file was the first one read when Linux 
   started the init process. This file is no longer used on Linux systems that support systemd.
- mtab: Contains a list of filesystems that are currently mounted.
- mtools.conf: Contains settings used by DOS tools in Linux.
- named.conf: Contains DNS settings if you are running your own DNS server (bind or bind9 package).
- nsswitch.conf: Contains name service switch settings, for identifying where critical system information 
   (user accounts, hostname-to-address mappings, and so on) comes from (local host or via network services).
- ntp.conf: Includes information needed to run the Network Time Protocol (NTP). 
- passwd: Stores account information for all valid users on the local system. Also includes other information, 
   such as the home directory and default shell. (Rarely includes the user passwords themselves, which are typically 
   stored in the /etc/shadow file.)
- printcap: Contains definitions for the printers configured for your computer. (If the printcap file doesn’t 
   exist, look for printer information in the /etc/cups directory.)
- profile: Sets system-wide environment and startup programs for all users. This file is read when the user logs in.
- protocols: Sets protocol numbers and names for a variety of Internet services.
- rpc: Defines remote procedure call names and numbers. 
- services: Defines TCP/IP and UDP service names and their port assignments.
- shadow: Contains encrypted passwords for users who are defined in the passwd file.
   (This is viewed as a more secure way to store passwords than the original encrypted password in the passwd file. 
    The passwd file needs to be publicly readable, whereas the shadow file can be unreadable by all but the root user.)
- shells: Lists the shell command-line interpreters (bash, sh, csh, and so on) that are
   available on the system as well as their locations.
- sudoers: Sets commands that can be run by users, who may not otherwise have permission to run the command, using 
   the sudo command. In particular, this file is used to provide selected users with root permission.
- rsyslog.conf: Defines what logging messages are gathered by the rsyslogd daemon and in which files they are 
   stored. (Typically, log messages are stored in files contained in the /var/log directory.)
- xinetd.conf: Contains simple configuration information used by the xinetd daemon process. This file mostly points 
   to the /etc/xinetd.d directory for information about individual services.


For Linux systems that don’t use the systemd facility, the main utility for logging error and debugging messages is 
  the rsyslogd daemon. (Some older Linux systems use sys- logd and syslogd daemons.) Although you can still use 
  rsyslogd with systemd systems, systemd has its own method of gathering and displaying messages called the
  systemd journal (journalctl command).


Managing log messages with rsyslogd
  The rsyslogd facility, and its predecessor syslogd, gather log messages and direct them to log files or remote log 
  hosts. Logging is done according to information in the /etc/rsyslog.conf file. Messages are typically directed to 
  log files that are usually in the /var/log directory, but they can also be directed to log hosts for additional 
  security are a few common log files:
    boot.log: Contains boot messages about services as they start up.
    messages: Contains many general informational messages about the system.
    secure: Contains security-related messages, such as login activity or any other act that authenticates users.


Using Other Administrative Accounts
  When daemon processes are run under separate administrative logins, having one of those processes cracked does not give 
  the cracker root permission and the ability to access other processes and files. Consider the following examples:

- lp: User owns such things as the /var/log/cups printing log file and various printing cache and spool files. 
   The home directory for lp is /var/spool/lpd. 
   
- apache: User can set up content files and directories on an Apache web server. It is primarily used to run the 
   web server processes (httpd) in RHEL and Fedora systems, while the www-data user runs the Apache service 
   (apache2) on Ubuntu systems.
- avahi: User runs the avahi daemon process to provide zeroconf services on your network.
- chrony: User runs the chronyd daemon, which is used to maintain accurate computer clocks.
- postfix: User owns various mail server spool directories and files. The user runs the daemon processes used 
   to provide the postfix service (master).
- bin: User owns many commands in /bin in traditional UNIX systems. This is not the case in some Linux systems 
   (such as Ubuntu, Fedora, and Gentoo) because root owns most executable files. The home directory of bin is /bin.
- news: User could do administration of Internet news services, depending on how you set permission 
   for /var/spool/news and other news-related resources. The home directory for news is /etc/news.
- rpc: User runs the remote procedure calls daemon (rpcbind), which is used to receive calls for services on 
   the host system. The NFS service uses the RPC service.

Working with loadable modules
  If you have added hardware to your computer that isn’t properly detected, you might need to load a module manually 
  for that hardware. Linux comes with a set of commands for loading, unloading, and getting information about hardware 
  modules. Kernel modules are installed in /lib/modules/ subdirectories. The name of each subdirectory is based on the 
  release number of the kernel. For example, if the kernel were 5.3.8-200.fc30.x86 _ 64, the 
  /lib/modules/5.3.8-200.fc30.x86 _ 64 directory would contain drivers for that kernel. Modules in those directories 
  can then be loaded and unloaded as they are needed.

Loading modules
  You can load any module (as root user) that has been compiled and installed (to a /lib/modules subdirectory) into 
  your running kernel using the modprobe command. A common reason for loading a module is to use a feature temporarily 
  (such as loading a module to support a special filesystem on some removable media you want to access). Another reason 
  to load a module is to identify that module as one that will be used by a particular piece of hardware that could 
  not be autodetected. The modprobe command loads modules temporarily—they disappear at the next reboot. To add 
  the module to your system permanently, add the modprobe command line to one of the startup scripts run at boot time.

Sometimes, the module you are trying to remove depends on other modules that may be loaded. For instance, the 
  usbcore module cannot be unloaded because it is a built-in module:   
     $ rmmod usbcore    ->>>      rmmod: ERROR: Module usbcore is builtin.
  You could use the modprobe -r command. With modprobe -r, instead of just removing the module you request, you 
  can also remove dependent modules that are not being used by other modules.


